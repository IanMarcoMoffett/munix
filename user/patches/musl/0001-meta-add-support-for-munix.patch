From 309d05622512b4ec6b763267864a8980dee1dff9 Mon Sep 17 00:00:00 2001
From: cleanbaja <cleanbaja@protonmail.com>
Date: Thu, 5 Jan 2023 20:24:19 +0000
Subject: [PATCH] meta: add support for munix

---
 arch/x86_64/syscall_arch.h | 40 ++++++++++++++++----------------
 src/internal/syscall.h     | 47 --------------------------------------
 2 files changed, 20 insertions(+), 67 deletions(-)

diff --git a/arch/x86_64/syscall_arch.h b/arch/x86_64/syscall_arch.h
index 92d5c17..9eb8381 100644
--- a/arch/x86_64/syscall_arch.h
+++ b/arch/x86_64/syscall_arch.h
@@ -1,67 +1,67 @@
 #define __SYSCALL_LL_E(x) (x)
 #define __SYSCALL_LL_O(x) (x)
 
-static __inline long __syscall0(long n)
+static __inline long __int syscall0(long n)
 {
 	unsigned long ret;
-	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n) : "rcx", "r11", "memory");
+	__asm__ __volatile__ ("int $0xFA" : "=a"(ret) : "a"(n) : "memory");
 	return ret;
 }
 
-static __inline long __syscall1(long n, long a1)
+static __inline long __int syscall1(long n, long a1)
 {
 	unsigned long ret;
-	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1) : "rcx", "r11", "memory");
+	__asm__ __volatile__ ("int $0xFA" : "=a"(ret) : "a"(n), "D"(a1) : "memory");
 	return ret;
 }
 
-static __inline long __syscall2(long n, long a1, long a2)
+static __inline long __int syscall2(long n, long a1, long a2)
 {
 	unsigned long ret;
-	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2)
-						  : "rcx", "r11", "memory");
+	__asm__ __volatile__ ("int $0xFA" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2)
+						  : "memory");
 	return ret;
 }
 
-static __inline long __syscall3(long n, long a1, long a2, long a3)
+static __inline long __int syscall3(long n, long a1, long a2, long a3)
 {
 	unsigned long ret;
-	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
-						  "d"(a3) : "rcx", "r11", "memory");
+	__asm__ __volatile__ ("int $0xFA" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
+						  "d"(a3) : "memory");
 	return ret;
 }
 
-static __inline long __syscall4(long n, long a1, long a2, long a3, long a4)
+static __inline long __int syscall4(long n, long a1, long a2, long a3, long a4)
 {
 	unsigned long ret;
 	register long r10 __asm__("r10") = a4;
-	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
-						  "d"(a3), "r"(r10): "rcx", "r11", "memory");
+	__asm__ __volatile__ ("int $0xFA" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
+						  "d"(a3), "r"(r10): "memory");
 	return ret;
 }
 
-static __inline long __syscall5(long n, long a1, long a2, long a3, long a4, long a5)
+static __inline long __int syscall5(long n, long a1, long a2, long a3, long a4, long a5)
 {
 	unsigned long ret;
 	register long r10 __asm__("r10") = a4;
 	register long r8 __asm__("r8") = a5;
-	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
-						  "d"(a3), "r"(r10), "r"(r8) : "rcx", "r11", "memory");
+	__asm__ __volatile__ ("int $0xFA" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
+						  "d"(a3), "r"(r10), "r"(r8) : "memory");
 	return ret;
 }
 
-static __inline long __syscall6(long n, long a1, long a2, long a3, long a4, long a5, long a6)
+static __inline long __int syscall6(long n, long a1, long a2, long a3, long a4, long a5, long a6)
 {
 	unsigned long ret;
 	register long r10 __asm__("r10") = a4;
 	register long r8 __asm__("r8") = a5;
 	register long r9 __asm__("r9") = a6;
-	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
-						  "d"(a3), "r"(r10), "r"(r8), "r"(r9) : "rcx", "r11", "memory");
+	__asm__ __volatile__ ("int $0xFA" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
+						  "d"(a3), "r"(r10), "r"(r8), "r"(r9) : "memory");
 	return ret;
 }
 
-#define VDSO_USEFUL
+#undef VDSO_USEFUL
 #define VDSO_CGT_SYM "__vdso_clock_gettime"
 #define VDSO_CGT_VER "LINUX_2.6"
 #define VDSO_GETCPU_SYM "__vdso_getcpu"
diff --git a/src/internal/syscall.h b/src/internal/syscall.h
index d5f294d..c531c15 100644
--- a/src/internal/syscall.h
+++ b/src/internal/syscall.h
@@ -75,52 +75,7 @@ static inline long __alt_socketcall(int sys, int sock, int cp, long a, long b, l
 #define __socketcall_cp(nm, a, b, c, d, e, f) __alt_socketcall(SYS_##nm, __SC_##nm, 1, \
 	(long)(a), (long)(b), (long)(c), (long)(d), (long)(e), (long)(f))
 
-/* fixup legacy 16-bit junk */
-
-#ifdef SYS_getuid32
-#undef SYS_lchown
-#undef SYS_getuid
-#undef SYS_getgid
-#undef SYS_geteuid
-#undef SYS_getegid
-#undef SYS_setreuid
-#undef SYS_setregid
-#undef SYS_getgroups
-#undef SYS_setgroups
-#undef SYS_fchown
-#undef SYS_setresuid
-#undef SYS_getresuid
-#undef SYS_setresgid
-#undef SYS_getresgid
-#undef SYS_chown
-#undef SYS_setuid
-#undef SYS_setgid
-#undef SYS_setfsuid
-#undef SYS_setfsgid
-#define SYS_lchown SYS_lchown32
-#define SYS_getuid SYS_getuid32
-#define SYS_getgid SYS_getgid32
-#define SYS_geteuid SYS_geteuid32
-#define SYS_getegid SYS_getegid32
-#define SYS_setreuid SYS_setreuid32
-#define SYS_setregid SYS_setregid32
-#define SYS_getgroups SYS_getgroups32
-#define SYS_setgroups SYS_setgroups32
-#define SYS_fchown SYS_fchown32
-#define SYS_setresuid SYS_setresuid32
-#define SYS_getresuid SYS_getresuid32
-#define SYS_setresgid SYS_setresgid32
-#define SYS_getresgid SYS_getresgid32
-#define SYS_chown SYS_chown32
-#define SYS_setuid SYS_setuid32
-#define SYS_setgid SYS_setgid32
-#define SYS_setfsuid SYS_setfsuid32
-#define SYS_setfsgid SYS_setfsgid32
-#endif
-
-
 /* fixup legacy 32-bit-vs-lfs64 junk */
-
 #ifdef SYS_fcntl64
 #undef SYS_fcntl
 #define SYS_fcntl SYS_fcntl64
@@ -321,8 +276,6 @@ static inline long __alt_socketcall(int sys, int sock, int cp, long a, long b, l
 #endif
 
 
-
-
 /* socketcall calls */
 
 #define __SC_socket      1
-- 
2.36.3

